{"version":3,"sources":["webpack:///./src/pages/ray-tracing/pure-canvas.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/lib/ray-tracing/shaders/vertex.vert","webpack:///./src/lib/ray-tracing/vec3.js","webpack:///./src/lib/ray-tracing/hitable.js","webpack:///./src/lib/ray-tracing/sphere.js","webpack:///./src/lib/ray-tracing/hitable-list.js","webpack:///./src/lib/ray-tracing/ray.js","webpack:///./src/lib/ray-tracing/camera.js","webpack:///./src/lib/ray-tracing/material.js","webpack:///./src/lib/ray-tracing/helpers.js","webpack:///./src/lib/ray-tracing/gl-helpers.js","webpack:///./src/lib/ray-tracing/render.js","webpack:///./src/pages/ray-tracing/canvas.js","webpack:///./src/pages/ray-tracing/animation.js","webpack:///./src/lib/ray-tracing/shaders/fragment.frag"],"names":["PureCanvas","shouldComponentUpdate","render","this","props","width","height","ref","node","contextRef","getContext","React","Component","_assertThisInitialized","self","ReferenceError","module","exports","Vec3","e0","e1","e2","e","x","y","z","r","g","b","identical","opposite","addVector","v","subtractVector","multiplyVector","multiplyScalar","t","divideScaler","k","length","Math","sqrt","squaredLength","makeUnitVector","dot","v1","v2","unitVector","Hitable","recordHit","sphere","ray","record","center","radius","material","p","pointAtParameter","normal","Sphere","c","hit","tMin","tMax","hitRecord","oc","origin","a","direction","discriminant","t1","t2","HitableList","l","n","list","listSize","tempRecord","hitAnything","closestSoFar","i","Ray","A","B","Camara","lowerLeftCorner","vec3","horizontal","vertical","getRay","u","Material","Lambertian","albedo","scatter","rayIn","target","randomInUnitSphere","isScatter","scattered","attenuation","Metal","f","fuzz","reflected","lambertian","metal","random","color","world","depth","Infinity","getImage","ns","image","hitable","eye","j","col","s","ir","ig","ib","push","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","deleteShader","texPositions","shaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","vShaderSource","fShaderSource","programInfo","program","attribLocations","vertexPosition","getAttribLocation","texCoordLocation","uniformLocations","resolutionUniformLocation","getUniformLocation","buffers","canvas","positions","x2","y2","setRectangle","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","texCoordBuffer","Uint8Array","tex","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","position","texCoord","initBuffers","viewport","clearColor","clear","COLOR_BUFFER_BIT","useProgram","positionLocation","FLOAT","vertexAttribPointer","enableVertexAttribArray","uniform2f","primitiveType","TRIANGLES","drawArrays","drawScene","Canvas","saveContext","bind","componentDidUpdate","Animation","state","angle","updateAnimationState","componentDidMount","rAF","requestAnimationFrame","setState","prevState","componentWillUnmount"],"mappings":"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","file":"component---src-pages-ray-tracing-animation-js-7b20269f7fa079fb1097.js","sourcesContent":["import React from \"react\"\n\nclass PureCanvas extends React.Component {\n  shouldComponentUpdate() {\n    return false\n  }\n\n  render() {\n    const { width, height } = this.props\n    return (\n      <canvas\n        width={width}\n        height={height}\n        ref={node => {\n          return node ? this.props.contextRef(node.getContext(\"webgl\")) : null\n        }}\n      />\n    )\n  }\n}\n\nexport default PureCanvas\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","module.exports = \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aVertexTexCoord;\\n\\nuniform vec2 uResolution;\\n\\nvarying vec2 vTexCoord;\\n\\nvoid main() {\\n    // convert the rectangle from pixels to 0.0 to 1.0\\n   vec2 zeroToOne = aVertexPosition / uResolution;\\n\\n   // convert from 0->1 to 0->2\\n   vec2 zeroToTwo = zeroToOne * 2.0;\\n\\n   // convert from 0->2 to -1->+1 (clipspace)\\n   vec2 clipSpace = zeroToTwo - 1.0;\\n\\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\\n\\n   // pass the texCoord to the fragment shader\\n   // The GPU will interpolate this value between points.\\n   vTexCoord = aVertexTexCoord;\\n}\\n\"","/**\n * v(e) = e\n */\nclass Vec3 {\n  constructor(e0, e1, e2) {\n    this.e = [e0, e1, e2]\n  }\n  // vec3() {\n  //   e[0] = e0;\n  //   e[1] = e1;\n  //   e[2] = e2;\n  // }\n  x() {\n    return this.e[0]\n  }\n  y() {\n    return this.e[1]\n  }\n  z() {\n    return this.e[2]\n  }\n  r() {\n    return this.e[0]\n  }\n  g() {\n    return this.e[1]\n  }\n  b() {\n    return this.e[2]\n  }\n\n  identical() {\n    return new Vec3(this.e[0], this.e[1], this.e[2])\n  }\n  opposite() {\n    return new Vec3(-this.e[0], -this.e[1], -this.e[2])\n  }\n  // operator[](i){\n  //   return this.e[i]\n  // }\n  // operator[](i){\n  //   return this.e[i]\n  // }\n\n  addVector(v) {\n    const identical = this.identical()\n    identical.e[0] += v.e[0]\n    identical.e[1] += v.e[1]\n    identical.e[2] += v.e[2]\n    return identical\n  }\n  subtractVector(v) {\n    const identical = this.identical()\n    identical.e[0] -= v.e[0]\n    identical.e[1] -= v.e[1]\n    identical.e[2] -= v.e[2]\n    return identical\n  }\n  multiplyVector(v) {\n    const identical = this.identical()\n    identical.e[0] *= v.e[0]\n    identical.e[1] *= v.e[1]\n    identical.e[2] *= v.e[2]\n    return identical\n  }\n  // divideVector(v) {}\n\n  multiplyScalar(t) {\n    const identical = this.identical()\n    identical.e[0] *= t\n    identical.e[1] *= t\n    identical.e[2] *= t\n    return identical\n  }\n  divideScaler(t) {\n    const identical = this.identical()\n    const k = 1 / t\n    identical.e[0] *= k\n    identical.e[1] *= k\n    identical.e[2] *= k\n    return identical\n  }\n\n  length() {\n    return Math.sqrt(\n      this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n    )\n  }\n  squaredLength() {\n    return this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n  }\n  makeUnitVector() {\n    const k =\n      1 /\n      Math.sqrt(\n        this.e[0] * this.e[0] + this.e[1] * this.e[1] + this.e[2] * this.e[2]\n      )\n    const identical = this.identical()\n    identical.e[0] *= k\n    identical.e[1] *= k\n    identical.e[2] *= k\n    return identical\n  }\n}\n\n// operator>>(is, vec3){\n//   console.log(this.e[0],this.e[1],this.e[2])\n//   return is\n// }\n// operator<<(os, vec3){\n//   console.log(this.e[0],this.e[1],this.e[2])\n//   return os\n// }\n\nexport function dot(v1, v2) {\n  return v1.e[0] * v2.e[0] + v1.e[1] * v2.e[1] + v1.e[2] * v2.e[2]\n}\n\nexport function cross(v1, v2) {\n  return new Vec3(\n    v1.e[1] * v2.e[2] - v1.e[2] * v2.e[1],\n    -(v1.e[0] * v2.e[2] - v1.e[2] * v2.e[0]),\n    v1.e[0] * v2.e[1] - v1.e[1] * v2.e[0]\n  )\n}\n\nexport function unitVector(v) {\n  return v.identical().divideScaler(v.length())\n}\n\nexport function reflect(v, n) {\n  return v.subtractVector(n.multiplyScalar(2*dot(v, n)))\n}\n\nexport default function(x, y, z) {\n  return new Vec3(x, y, z)\n}\n","/*\nconst hitRecord = {\n  t,\n  p,\n  normal,\n  material,\n};\n*/\nclass Hitable {\n  // constructor() {}\n  // hit(ray, tMin, tMax, hitRecord) {}\n}\n\nexport default Hitable\n","import { dot } from \"./vec3\"\nimport Hitable from \"./hitable\"\n\nfunction recordHit(sphere, ray, t, record) {\n  const { center, radius, material } = sphere\n  const p = ray.pointAtParameter(t)\n  record.t = t\n  record.p = p\n  record.normal = p.subtractVector(center).divideScaler(radius)\n  record.material = material\n}\n\nclass Sphere extends Hitable {\n  constructor(c, r, material) {\n    super()\n    this.center = c\n    this.radius = r\n    this.material = material\n  }\n  hit(ray, tMin, tMax, hitRecord) {\n    const oc = ray.origin().subtractVector(this.center)\n    const a = dot(ray.direction(), ray.direction())\n    const b = dot(oc, ray.direction())\n    const c = dot(oc, oc) - this.radius * this.radius\n    const discriminant = b * b - a * c\n    if (discriminant > 0) {\n      const t1 = (-b - Math.sqrt(discriminant)) / a\n      if (t1 < tMax && t1 > tMin) {\n        recordHit(this, ray, t1, hitRecord)\n        return true\n      }\n      const t2 = (-b + Math.sqrt(discriminant)) / a\n      if (t2 < tMax && t2 > tMin) {\n        recordHit(this, ray, t2, hitRecord)\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport default function(center, radius, material) {\n  return new Sphere(center, radius, material)\n}\n","import Hitable from \"./hitable\"\n\nclass HitableList extends Hitable {\n  constructor(l, n) {\n    super()\n    this.list = l\n    this.listSize = n\n  }\n  hit(ray, tMin, tMax, hitRecord) {\n    const { material } = hitRecord\n    let tempRecord = { material }\n    let hitAnything = false\n    let closestSoFar = tMax\n    for (let i = 0; i < this.listSize; i++) {\n      const isHit = this.list[i].hit(ray, tMin, closestSoFar, tempRecord)\n      if (isHit) {\n        hitAnything = true\n        closestSoFar = tempRecord.t\n        hitRecord = tempRecord\n      }\n    }\n    return { hitAnything, closestSoFar, hitRecord }\n  }\n}\n\nexport default function(list, listSize) {\n  return new HitableList(list, listSize)\n}\n","/**\n * p(t) = ​ A ​ + t* B\n */\nclass Ray {\n  constructor(A, B) {\n    this.A = A\n    this.B = B\n  }\n  origin() {\n    return this.A\n  }\n  direction() {\n    return this.B\n  }\n  pointAtParameter(t) {\n    return this.A.addVector(this.B.multiplyScalar(t))\n  }\n}\n\nexport default function(A, B) {\n  return new Ray(A, B)\n}\n","import vec3 from \"./vec3\"\nimport ray from \"./ray\"\n\nclass Camara {\n  constructor() {\n    this.lowerLeftCorner = vec3(-2.0, -1.0, -1.0)\n    this.horizontal = vec3(4.0, 0.0, 0.0)\n    this.vertical = vec3(0.0, 2.0, 0.0)\n    this.origin = vec3(0.0, 0.0, 0.0)\n  }\n  getRay(u, v) {\n    return ray(\n      this.origin,\n      this.lowerLeftCorner\n        .addVector(this.horizontal.multiplyScalar(u))\n        .addVector(this.vertical.multiplyScalar(v))\n        .subtractVector(this.origin)\n    )\n  }\n}\n\nexport default function() {\n  return new Camara()\n}\n","import { dot, reflect, unitVector } from \"./vec3\"\nimport ray from \"./ray\"\nimport { randomInUnitSphere } from \"./helpers\"\n\nclass Material {}\n\nclass Lambertian extends Material {\n  constructor(a) {\n    super()\n    this.albedo = a\n  }\n  scatter(rayIn, hitRecord) {\n    const { p, normal } = hitRecord\n    const target = p.addVector(normal).addVector(randomInUnitSphere())\n    const scattered = ray(p, target.subtractVector(p))\n    const attenuation = this.albedo\n    return {\n      isScatter: true,\n      scattered,\n      attenuation,\n    }\n  }\n}\n\nclass Metal extends Material {\n  constructor(a, f) {\n    super()\n    this.albedo = a\n    this.fuzz = f < 1 ? f : 1\n  }\n  scatter(rayIn, hitRecord) {\n    const { p, normal } = hitRecord\n    const reflected = reflect(unitVector(rayIn.direction()), normal)\n    const scattered = ray(p, reflected.addVector(randomInUnitSphere().multiplyScalar(this.fuzz)))\n    const attenuation = this.albedo\n    return {\n      isScatter: dot(scattered.direction(), normal) > 0,\n      scattered,\n      attenuation,\n    }\n  }\n}\n\nexport const lambertian = a => new Lambertian(a)\nexport const metal = (a, f) => new Metal(a, f)\n","import vec3, {\n  unitVector,\n  dot,\n  // cross\n} from \"./vec3\"\nimport sphere from \"./sphere\"\nimport hitableList from \"./hitable-list\"\nimport camara from \"./camera\"\nimport { lambertian, metal } from \"./material\"\n\nexport function setRectangle(x, y, width, height) {\n  const x1 = x\n  const x2 = x + width\n  const y1 = y\n  const y2 = y + height\n  return [x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]\n}\n\nexport function hitSphere(center, radius, ray) {\n  const oc = ray.origin().subtractVector(center)\n  const a = dot(ray.direction(), ray.direction())\n  const b = 2.0 * dot(oc, ray.direction())\n  const c = dot(oc, oc) - radius * radius\n  const discriminant = b * b - 4 * a * c\n  if (discriminant < 0) {\n    return -1.0\n  } else {\n    return (-b - Math.sqrt(discriminant)) / (2.0 * a)\n  }\n}\n\nexport function randomInUnitSphere() {\n  let p = vec3()\n  do {\n    p = vec3(Math.random(), Math.random(), Math.random()).subtractVector(\n      vec3(1, 1, 1)\n    )\n  } while (p.squaredLength() >= 1.0)\n  return p\n}\n\nfunction color(r, world, depth) {\n  const { hitAnything, \n    // closestSoFar,\n     hitRecord } = world.hit(\n    r,\n    0.0,\n    Infinity,\n    {}\n  )\n  if (hitAnything) {\n    const { material } = hitRecord\n    const { isScatter, scattered, attenuation } = material.scatter(r, hitRecord)\n    if (depth < 50 && isScatter) {\n      return attenuation.multiplyVector(color(scattered, world, depth + 1))\n    } else {\n      return vec3(0, 0, 0)\n    }\n  } else {\n    const unitDirection = unitVector(r.direction())\n    const t = 0.5 * (unitDirection.y() + 1.0)\n    return vec3(1.0, 1.0, 1.0)\n      .multiplyScalar(1.0 - t)\n      .addVector(vec3(0.5, 0.7, 1.0).multiplyScalar(t))\n  }\n}\n\nexport function getImage(width, height, ns = 100) {\n  const image = []\n  const list1 = sphere(vec3(0, 0, -1), 0.5, lambertian(vec3(0.8, 0.3, 0.3)))\n  const list2 = sphere(\n    vec3(0, -100.5, -1),\n    100,\n    lambertian(vec3(0.8, 0.8, 0.0))\n  )\n  const list3 = sphere(vec3(1, 0, -1), 0.5, metal(vec3(0.8, 0.6, 0.2), 1.0))\n  const list4 = sphere(vec3(-1, 0, -1), 0.5, metal(vec3(0.8, 0.8, 0.8), 0.3))\n  const hitable = [list1, list2, list3, list4]\n  const world = hitableList(hitable, hitable.length)\n  const eye = camara()\n  for (let j = height - 1; j >= 0; j--) {\n    for (let i = 0; i < width; i++) {\n      let col = vec3(0, 0, 0)\n      for (let s = 0; s < ns; s++) {\n        const u = (i + Math.random()) / width\n        const v = (j + Math.random()) / height\n        const r = eye.getRay(u, v)\n        // const p = r.pointAtParameter(2.0)\n        col = col.addVector(color(r, world, 0))\n      }\n      col = col.divideScaler(ns)\n      const ir = 255.99 * Math.sqrt(col.e[0])\n      const ig = 255.99 * Math.sqrt(col.e[1])\n      const ib = 255.99 * Math.sqrt(col.e[2])\n      image.push(ir)\n      image.push(ig)\n      image.push(ib)\n      image.push(255)\n    }\n  }\n  return image\n}\n","export function initShaderProgram(gl, vsSource, fsSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n  const shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    alert(\n      \"Unable to initialize the shader program: \" +\n        gl.getProgramInfoLog(shaderProgram)\n    )\n    return null\n  }\n\n  return shaderProgram\n}\n\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type)\n\n  gl.shaderSource(shader, source)\n\n  gl.compileShader(shader)\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    alert(\n      \"An error occurred compiling the shaders: \" + gl.getShaderInfoLog(shader)\n    )\n    gl.deleteShader(shader)\n    return null\n  }\n\n  return shader\n}\n","import vShaderSource from \"./shaders/vertex.vert\"\nimport fShaderSource from \"./shaders/fragment.frag\"\nimport { setRectangle, getImage } from \"./helpers\"\nimport { \n  // compileShader,\n   initShaderProgram } from \"./gl-helpers\"\n// import { mat3 } from \"gl-matrix\"\n\nconst texPositions = [\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  0.0,\n  1.0,\n  0.0,\n  1.0,\n  1.0,\n  0.0,\n  1.0,\n  1.0,\n]\n\nfunction initBuffers(gl) {\n  const { width, height } = gl.canvas\n  const positions = setRectangle(0, 0, width, height)\n\n  const positionBuffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n\n  const texCoordBuffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texPositions), gl.STATIC_DRAW)\n  const image = new Uint8Array(getImage(width, height))\n  const tex = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, tex)\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0, // level\n    gl.RGBA, // internal format\n    width, // width\n    height, // height\n    0, // border\n    gl.RGBA, // format\n    gl.UNSIGNED_BYTE, // type\n    image // data\n  )\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  return {\n    position: positionBuffer,\n    texCoord: texCoordBuffer,\n  }\n}\n\nfunction drawScene(gl, programInfo, buffers) {\n  const { width, height } = gl.canvas\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, width, height)\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0) // Clear to black, fully opaque\n  gl.clear(gl.COLOR_BUFFER_BIT)\n\n  gl.useProgram(programInfo.program)\n\n  {\n    const positionLocation = programInfo.attribLocations.vertexPosition\n    const numComponents = 2\n    const type = gl.FLOAT\n    const normalize = false\n    const stride = 0\n    const offset = 0\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\n    gl.vertexAttribPointer(\n      positionLocation,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(positionLocation)\n  }\n\n  {\n    const texCoordLocation = programInfo.attribLocations.texCoordLocation\n    const size = 2 // 2 components per iteration\n    const type = gl.FLOAT // the data is 32bit floats\n    const normalize = false // don't normalize the data\n    const stride = 0 // 0 = move forward size * sizeof(type) each iteration to get the next position\n    const offset = 0 // start at the beginning of the buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.texCoord)\n    gl.vertexAttribPointer(\n      texCoordLocation,\n      size,\n      type,\n      normalize,\n      stride,\n      offset\n    )\n    gl.enableVertexAttribArray(texCoordLocation)\n  }\n\n  gl.uniform2f(\n    programInfo.uniformLocations.resolutionUniformLocation,\n    width,\n    height\n  )\n\n  {\n    const primitiveType = gl.TRIANGLES\n    const offset = 0\n    const count = 6\n    gl.drawArrays(primitiveType, offset, count)\n  }\n}\n\nexport default function render(gl) {\n  if (!gl) {\n    alert(\n      \"Unable to initialize WebGL. Your browser or machine may not support it.\"\n    )\n    return\n  }\n  // const program = gl.createProgram()\n  const shaderProgram = initShaderProgram(gl, vShaderSource, fShaderSource)\n  const programInfo = {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\n      texCoordLocation: gl.getAttribLocation(shaderProgram, \"aVertexTexCoord\"),\n    },\n    uniformLocations: {\n      resolutionUniformLocation: gl.getUniformLocation(\n        shaderProgram,\n        \"uResolution\"\n      ),\n    },\n  }\n\n  const buffers = initBuffers(gl)\n\n  drawScene(gl, programInfo, buffers)\n}\n","// import { mat4 } from \"gl-matrix\"\nimport React from \"react\"\nimport PureCanvas from \"./pure-canvas\"\nimport render from \"../../lib/ray-tracing/render\"\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.saveContext = this.saveContext.bind(this)\n    this.width = 500\n    this.height = 500\n  }\n\n  saveContext(gl) {\n    this.gl = gl\n  }\n\n  componentDidUpdate() {\n    // const { angle } = this.props\n    render(this.gl)\n  }\n\n  render() {\n    return <PureCanvas contextRef={this.saveContext} width=\"400\" height=\"200\" />\n  }\n}\n\nexport default Canvas\n","import React from \"react\"\nimport Canvas from \"./canvas\"\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { angle: 0 }\n    this.updateAnimationState = this.updateAnimationState.bind(this)\n  }\n\n  componentDidMount() {\n    this.rAF = requestAnimationFrame(this.updateAnimationState)\n  }\n\n  updateAnimationState() {\n    this.setState(prevState => ({ angle: prevState.angle + 1 }))\n    // this.rAF = requestAnimationFrame(this.updateAnimationState)\n  }\n\n  componentWillUnmount() {\n    // cancelAnimationFrame(this.rAF)\n  }\n\n  render() {\n    return <Canvas angle={this.state.angle} />\n  }\n}\n\nexport default Animation\n","module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\n// our texture\\nuniform sampler2D tex;\\n\\n// the texCoords passed in from the vertex shader.\\nvarying vec2 vTexCoord;\\n\\nvoid main() {\\n   gl_FragColor = texture2D(tex, vTexCoord);\\n}\\n\""],"sourceRoot":""}