{"version":3,"sources":["webpack:///./src/components/slider.js","webpack:///./src/pages/geo/camera.js","webpack:///./src/pages/geo/index.js"],"names":["Slider","name","min","max","step","value","defaultValue","onChange","useState","valueState","setValue","console","log","type","event","newValue","target","getBaseLog","x","y","Math","Camera","lambda","phi","gamma","width","distance","scale","theta","acos","size","cos","sin","SQRT2","_handleChnage","GeoPage","state","projection","rotate","tilt","_handleChangeCamara","bind","_update","this","setState","render","camera","height","outline","graticule","land","land110","componentDidUpdate","prevState","isRotationChange","Component"],"mappings":"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","file":"component---src-pages-geo-index-js-92025f6581df46dcd4fc.js","sourcesContent":["import React, { useState } from \"react\"\n\n// TODO use chakra ui\nconst Slider = ({\n  name,\n  min,\n  max,\n  step = \"any\",\n  value,\n  defaultValue,\n  onChange,\n}) => {\n  const [valueState, setValue] = useState(value || defaultValue)\n  const onChangeValue = event => {\n    const newValue = event.target.value\n    setValue(newValue)\n    onChange(newValue)\n  }\n  console.log(value, defaultValue, valueState)\n  return (\n    <label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={valueState}\n        onChange={onChangeValue}\n      />\n      {`${name}=${value}`}\n    </label>\n  )\n}\n\nexport default Slider\n","import React from \"react\"\nimport Slider from \"../../components/slider\"\n\nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x)\n}\n\nconst Camera = ({\n  lambda,\n  phi,\n  gamma,\n  width,\n  distance,\n  // tilt,\n  scale,\n  onChange,\n}) => {\n  const _handleChnage = (name, value) => {\n    console.log(name, value)\n    return onChange(name, value)\n  }\n  const distanceScale = getBaseLog(2, distance)\n  const theta = Math.acos(1 / distance)\n  const size = ((distance - 1) / (distance - Math.cos(theta))) * Math.sin(theta)\n  const scaleScale = ((Math.SQRT2 / (width - 2)) * size) / getBaseLog(2, scale)\n\n  const _getDistance = value => Math.pow(2, value)\n  const _getScale = value => {\n    const thetas = Math.acos(1 / distance)\n    const size =\n      ((distance - 1) / (distance - Math.cos(thetas))) * Math.sin(thetas)\n    return ((Math.pow(2, value) / size) * (width - 2)) / Math.SQRT2\n  }\n  return (\n    <div>\n      <Slider\n        name={\"lambda\"}\n        min={-180}\n        max={180}\n        value={lambda}\n        defaultValue={0}\n        onChange={value => _handleChnage(\"lambda\", value)}\n      />\n      <Slider\n        name={\"phi\"}\n        min={-90}\n        max={90}\n        value={phi}\n        defaultValue={0}\n        onChange={value => {\n          onChange(\"phi\", value)\n        }}\n      />\n      <Slider\n        name={\"gamma\"}\n        min={-180}\n        max={180}\n        value={gamma}\n        defaultValue={0}\n        onChange={value => onChange(\"gamma\", value)}\n      />\n    </div>\n  )\n}\n\nexport default Camera\n","import React, { Component } from \"react\"\n// import Slider from \"../../components/slider\"\nimport Canvas from \"./canvas\"\nimport Camera from \"./camera\"\nimport { projection, outline, graticule, land110, \n  // land50\n } from \"../../lib/geo/utils\"\n\nclass GeoPage extends Component {\n  constructor() {\n    super()\n    this.state = {\n      projection: projection,\n      lambda: 0,\n      phi: 0,\n      gamma: 0,\n      rotate: [0, 0, 0],\n      scale: 500,\n      tilt: 0,\n      distance: 2,\n    }\n    this._handleChangeCamara = this._handleChangeCamara.bind(this)\n    this._update = this._update.bind(this)\n  }\n  _handleChangeCamara(name, value) {\n    console.log(name, value)\n    this.setState({\n      [name]: value,\n    })\n  }\n  _update() {\n    const { lambda, phi, gamma } = this.state\n    this.setState({\n      rotate: [lambda, phi, gamma],\n    })\n  }\n  render() {\n    const {\n      projection,\n      lambda,\n      phi,\n      // gamma,\n      rotate,\n      distance,\n      tilt,\n      scale,\n    } = this.state\n    const { _handleChangeCamara } = this\n    const width = 954\n    const height = width\n    const camera = {\n      scale,\n      tilt,\n      distance,\n    }\n    return (\n      <div>\n        <Camera\n          lambda={lambda}\n          phi={phi}\n          gamma={phi}\n          width={width}\n          distance={distance}\n          tilt={tilt}\n          scale={scale}\n          onChange={_handleChangeCamara}\n        />\n        <Canvas\n          width={width}\n          height={height}\n          projection={projection(width, height, rotate, camera)}\n          outline={outline}\n          graticule={graticule}\n          land={land110}\n        />\n      </div>\n    )\n  }\n  componentDidUpdate(\n    // prevProps, \n    prevState) {\n    const { \n      // projection, \n      lambda, phi, gamma } = this.state\n    const { _update } = this\n    const isRotationChange =\n      lambda !== prevState.lambda ||\n      phi !== prevState.phi ||\n      gamma !== prevState.gamma\n    console.log(\"didUpdate\", isRotationChange, lambda, phi, gamma)\n    if (isRotationChange) {\n      console.log(\"_update\")\n      _update()\n    }\n  }\n}\n\nexport default GeoPage\n"],"sourceRoot":""}